
@startuml

package Protocols {
    interface CompletionController {
        associatedtype Success
        Completion is Fallible<<Success>>
    }

    interface Completing {
        func onComplete()
        func mapCompletion()
    }

    interface Completable {
        func complete()
    }

    interface UpdatesController {
        associatedtype Update
    }

    interface Updating {
        func onUpdate()
        func mapUpdate()
    }

    interface Updatable {
        func update()
    }

    interface EventsController {
        typealias Event = ChannelEvent<<Update, Success>>
    }

    interface Streaming {
    }

    interface Streamable {
    }
}

class Future
class Promise
class Channel
class BaseProducer
class ProducerProxy
class Producer
class Sink

CompletionController <|.. Completing
CompletionController <|.. Completable

UpdatesController <|.. Updating
UpdatesController <|.. Updatable

CompletionController <|.. EventsController
UpdatesController <|.. EventsController

EventsController <|.. Streaming
EventsController <|.. Streamable

Updating <|.. Streaming
Completing <|.. Streaming

Updatable <|.. Streamable
Completable <|.. Streamable

Completing <|.. Future

Future <|-- Promise
Completable <|.. Promise

Streaming <|.. Channel

Channel <|-- BaseProducer
Streamable <|.. BaseProducer

BaseProducer <|-- Producer
BaseProducer <|-- ProducerProxy

Streamable <|.. Sink

@enduml